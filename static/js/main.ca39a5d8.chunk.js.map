{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initialSessionLength","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","tick","time","state","setState","toggleSessionBreak","audioBeep","play","breakLength","sessionLength","timerRunning","activeTimer","_this$state","_this$state2","clearInterval","intervalID","pause","currentTime","_this$state3","setInterval","_this2","react_default","a","createElement","id","className","onClick","breakIncrement","breakDecrement","sessionIncrement","Math","floor","sessionDecrement","moment","format","toggleTimer","resetTimer","preload","src","ref","audio","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca39a5d8.chunk.js","sourcesContent":["import './App.css';\nimport React, { Component } from 'react';\nimport moment from '../node_modules/moment';\n\n\nconst initialSessionLength = 25;\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      breakLength: 5,\n      sessionLength: initialSessionLength,\n      timerRunning: false,\n      time: initialSessionLength * 60 * 1000,\n      activeTimer: 'Session'\n    }\n  }\n\n  breakIncrement() {\n    const { breakLength } = this.state;\n    this.setState({\n      breakLength: breakLength <= 59 ? (breakLength + 1) : 60\n    })\n  }\n  breakDecrement() {\n    const { breakLength } = this.state;\n    this.setState({\n      breakLength: breakLength >= 2 ? (breakLength - 1) : 1\n    })\n  }\n\n  sessionIncrement() {\n    const { sessionLength, time } = this.state;\n    this.setState({\n      sessionLength: sessionLength <= 59 ? (sessionLength + 1) : 60,\n      time: time + 60 * 1000\n    })\n  }\n\n  sessionDecrement() {\n    const { sessionLength, time } = this.state;\n    this.setState({\n      sessionLength: sessionLength >= 2 ? (sessionLength - 1) : 1,\n      time: time > 60 * 1000 ? (sessionLength * 60 * 1000) - 60 * 1000 : (sessionLength * 60 * 1000)\n    })\n  }\n  resetTimer() {\n    this.setState({\n      breakLength: 5,\n      sessionLength: 25,\n      timerRunning: false,\n      time: 25 * 60 * 1000,\n      activeTimer: 'Session'\n    })\n    clearInterval(this.intervalID);\n    this.audioBeep.pause()\n    this.audioBeep.currentTime = 0\n  }\n\n  tick = () => {\n    let { time } = this.state\n    this.setState({ time: time - 1000 })\n    if (this.state.time < 0) {\n      this.toggleSessionBreak()\n      this.audioBeep.play()\n    }\n  }\n\n  toggleSessionBreak() {\n    const { breakLength, sessionLength } = this.state\n    if (this.state.activeTimer === 'Session') {\n      this.setState({\n        activeTimer: 'Break',\n        time: breakLength * 60 * 1000\n      })\n    } else {\n      this.setState({\n        activeTimer: 'Session',\n        time: sessionLength * 60 * 1000\n      })\n    }\n  }\n\n  toggleTimer() {\n    this.setState({ timerRunning: !this.state.timerRunning });\n    if (!this.state.timerRunning) {\n      this.intervalID = setInterval(this.tick, 1000)\n    } else {\n      clearInterval(this.intervalID)\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"pomodoro-clock\">\n        <div id=\"title\">\n          <h1 >Pomodoro Clock</h1>\n        </div>\n\n        <div id=\"break\">\n          <h3 id=\"break-label\">Break Length</h3>\n          <div className=\"timer-controls\">\n            <button id=\"break-increment\" onClick={() => { this.breakIncrement() }} >Up</button><h4 id=\"break-length\">{this.state.breakLength}</h4><button id=\"break-decrement\" onClick={() => { this.breakDecrement() }}>Down</button>\n          </div>\n        </div>\n        <div id=\"session\">\n          <h3 id=\"session-label\">Session Length</h3>\n          <div className=\"timer-controls\">\n            <button id=\"session-increment\" onClick={() => { this.sessionIncrement() }}>Up</button><h4 id=\"session-length\"> {Math.floor(this.state.sessionLength)} </h4><button id=\"session-decrement\" onClick={() => { this.sessionDecrement() }}>Down</button>\n          </div>\n        </div>\n        <div id=\"timer\">\n          <h2 id=\"timer-label\">{this.state.activeTimer}</h2>\n          <h1 id=\"time-left\"> {moment(this.state.time).format('mm:ss')} </h1>\n        </div>\n        <div id=\"controls\">\n          <button id=\"start_stop\" onClick={() => { this.toggleTimer() }}>Start/Stop</button>\n          <button id=\"reset\" onClick={() => { this.resetTimer() }} >Reset</button>\n        </div>\n        <audio id=\"beep\" preload=\"auto\" src=\"https://goo.gl/65cBl1\"\n          ref={(audio) => { this.audioBeep = audio; }}></audio>\n      </div>\n    )\n  }\n  componentDidMount() {\n\n  }\n\n  componentWillUnmount() {\n\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}